{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Sylva","text":"<p>More to come.</p> <p>Give us a star on GitHub and watch the repository for release notifications. </p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>sylva config --edit</code> - Interactively edit the configuration file and add API keys.</li> <li><code>sylva search [username]</code> - Run a cursory search for a given string.</li> <li><code>sylva branch [username]</code> - Start searching based on a simple string, and branch out as more identities are discovered.</li> <li><code>sylva --help</code> - Print help message and exit.</li> </ul>"},{"location":"install-adv/","title":"Installing Sylva the hard way","text":"<p>Installing Sylva from source has zero official support for end users. We only recommend this method for advanced users or those who plan to contribute to the project.</p> <p>For the purposes of this document, it is assumed that the user is running Linux.</p>"},{"location":"install-adv/#overview","title":"Overview","text":"<p>Sylva uses a PDM backend. There is no <code>requirements.txt</code> file, and Issues should not be raised for this missing file.</p>"},{"location":"install-adv/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install PDM according to their documentation</li> <li>Chrome or Chromium</li> <li>xorg-x11-server-Xvfb (Fedora), xvfb (Debian), or your distribution's equivalent</li> </ul>"},{"location":"install-adv/#installing-sylva-for-development","title":"Installing Sylva for development","text":"<pre><code>git clone https://github.com/ppfeister/sylva.git\ncd sylva\npdm install -G:all\n</code></pre> <p>Sylva is now installed in an isolated live environment. Changes made to the code should be reflected within this environment immediately.</p> <p>All dependency groups are installed, including those for regression testing, MkDocs editing, etc.</p>"},{"location":"install-adv/#running-within-the-venv","title":"Running within the venv","text":"<p>Users can enter the virtual environment by running <code>source .venv/bin/activate</code>. The difficulty here is that global installs of the same package are known to interfere. If you have Sylva installed globally as well, you should defer to the next method.</p> <p>Assuming you have entered the venv, you can run Sylva as you would normally.</p>"},{"location":"install-adv/#running-via-pdm","title":"Running via PDM","text":"<p>Due to the aforementioned complication, many developers may opt to run Sylva through PDM itself.</p> <pre><code>pdm run sylva search &lt;query&gt;\n</code></pre>"},{"location":"install-adv/#installing-sylva-globally","title":"Installing Sylva globally","text":"<p>Warning</p> <p>This is not an officially supported method of installation.</p> <p>This method also lacks any means of automatic or assisted updates.</p> <pre><code>git clone https://github.com/ppfeister/sylva.git\ncd sylva\npdm install --global --prod\n</code></pre>"},{"location":"install-adv/#building-the-docker-image","title":"Building the Docker image","text":"<p>Sylva provides both the latest release (semver tagged and as latest) and the current state of <code>master</code> (as preview) as a Docker image, available on both Docker Hub and the GitHub Container Registry.</p> <p>If you'd rather build your own image, such as for development use or validation, you can do so with the provided multi-stage Dockerfile. The prerequisites mentioned earlier can be skipped you're only building the Docker image.</p> <p>Build target <code>cli-prod</code> is the standard command line target. Future targets may include web interfaces, or other added functionality.</p> <pre><code>git clone https://github.com/ppfeister/sylva.git\ncd sylva\ndocker build --target cli-prod -t ppfeister/sylva .\n</code></pre>"},{"location":"install/","title":"Installing Sylva the easy way","text":"<p>Sylva performs best as a Docker container, but several other methods are and will be supported in the future. The Docker images are all fully self-contained, which many users may find preferable.</p>"},{"location":"install/#docker","title":"Docker","text":"<p>Tip</p> <p>The default image reflects the latest tagged release. To fetch the HEAD of <code>master</code>, use <code>sylva/sylva:preview</code>.</p> <pre><code>docker run -it sylva/sylva branch &lt;query&gt; #(1)!\n</code></pre> <ol> <li>Sylva can be found on both Docker Hub and GitHub Container Registry.     Users who prefer the latter can opt for <code>ghcr.io/ppfeister/sylva</code> instead.</li> </ol> <p><code>-it</code> isn't strictly necessary, but it's recommended for now to more readily allow full DataFrame dumps. In the future, this will be handled in a prettier and more user-friendly way.</p>"},{"location":"install/#docker-compose","title":"Docker Compose","text":"<p>The compose file will become more useful later on, as environment variables, persistent volumes, and other configuration options are added.</p> <pre><code>services:\n  sylva:\n    container_name: sylva\n    image: 'sylva/sylva' #(1)!\n</code></pre> <ol> <li>Sylva can be found on both Docker Hub and GitHub Container Registry.     Users who prefer the latter can opt for <code>ghcr.io/ppfeister/sylva</code> instead.</li> </ol> <pre><code>docker compose run -it sylva branch &lt;query&gt;\n</code></pre>"},{"location":"install/#pypi-pip","title":"PyPI (pip)","text":"<p>You should know...</p> <p>This method requires the installation of additional dependencies for full functionality. It is not fully self-contained.</p> <p>Basic functionality is still available.</p> <pre><code>pip install sylva\n</code></pre> <ul> <li>Chrome or Chromium</li> <li>xorg-x11-server-Xvfb (Fedora), xvfb (Debian), or your distribution's equivalent</li> </ul> <p>Without these two dependencies, Sylva will be unable to query targets that are behind a captcha.</p>"},{"location":"contributing/documentation/","title":"Documentation","text":"<p>Sylva's API reference is generated from docstrings in the source code. With this, all classes, members, attributes, and functions that are exposed to the user in a programmatic way are required to have Google-style docstrings. When useful, admonitions are also supported and recommended.</p> <p>The sylva.handler.Handler class is a prime example of how these docstrings with admonitions are used, and how they are presented in the documentation. [source] [rendered]</p>"},{"location":"contributing/introduction/","title":"Contributing to Sylva","text":"<p>Thanks for your interest in contributing to Sylva!</p> <p>All thoughtful contributions are welcome and appreciated. Newcomers who aren't sure where to start are encouraged to look for issues labeled good first issue for an easy introduction.</p> <p>Note that these are just guidelines, and reasonable deviation is often acceptable. Just let us know. Sometimes things fall outside of the normal scope of this document.</p> <p>Note</p> <p>The keywords MUST, MUST NOT, SHOULD, SHOULD NOT, and MAY are to be interpreted as described in RFC 2119.</p>"},{"location":"contributing/introduction/#general-guidelines","title":"General Guidelines","text":"<ul> <li>All pull requests SHOULD adhere to the Conventional Commits Specification.</li> <li>Contributors SHOULD strive for one commit per realistic change, and one realistic change per commit. All this means is that fixing a typo shouldn't be 12 commits. Be thoughtful.</li> <li>Contributors SHOULD open an issue or discussion prior to starting work on a new feature or large refactor, to ensure the work is in line with the project's goals.</li> </ul>"},{"location":"contributing/introduction/#license","title":"License","text":"<p>Contributors MUST agree that their patch will be licensed under the project's current license, and that the maintainers of the project are free to relicense the project as deemed appropriate.</p> <p>With the project in its infancy, we may decide a different license is more appropriate for the project. Once we're satisifed with the current license being the most appropriate, this message will be removed.</p>"},{"location":"contributing/regression/","title":"Regression Testing","text":"<p>Since projects like these contain many moving parts, we prefer to use regression testing to ensure that changes don't break existing functionality. Regression testing is built into our CI (build statuses are shown above), with tests occuring on both changes to <code>master</code> and the publication of new releases before their builds are pushed for distribution.</p> <p>Note that it's normal for the build status of <code>master</code> (at the HEAD of the branch) to be failing on occasion, due to the staged application of certain changes. Most of the time our CI will prevent these failed builds from replacing <code>preview</code> images, but we may override that on occasion.</p> <p>Contributors SHOULD run the test suite locally before committing changes, to ensure that all bases are covered. The test suite can be fully self-contained in the pdm development environment, and can therefore be ran without any additional local dependencies.</p>"},{"location":"contributing/regression/#running-unit-tests","title":"Running unit tests","text":"<p>Contributors that have installed the development environment via <code>pdm install -G:all</code> as described in the Advanced Install guide can run the test suite one of two ways:</p>"},{"location":"contributing/regression/#within-venv","title":"Within venv","text":"<pre><code>tox p\n</code></pre>"},{"location":"contributing/regression/#outside-of-venv","title":"Outside of venv","text":"<pre><code>pdm run tox p\n</code></pre>"},{"location":"reference/examples/","title":"Programmatic Examples","text":"<p>Sylva exposes a relatively simple API for programmatic use and for easier inclusion in downstream projects. There are two primary methods of use: one that searches based on a generic and arbitrary string, and one that conducts a more targeted search based on the type of data provided. In either case, methods branch_all and search_all are used to execute the search and can be interchanged depending on whether or not recursive searching is desired.</p> <p>Further functionality is documented elsewhere throughout this reference material.</p>"},{"location":"reference/examples/#generic-search","title":"Generic search","text":"<pre><code>from sylva.handler import Handler\n\nhandler = Handler()\nhandler.branch_all('username')\nresults = handler.collector.get_data() #(1)!\n\nprint(results)\n</code></pre> <ol> <li>Handler's member collector is a sylva.Collector object where method get_data() returns a pandas.DataFrame</li> </ol>"},{"location":"reference/examples/#targeted-search","title":"Targeted search","text":"<pre><code>from sylva.handler import Handler, QueryDataItem\nfrom sylva.types import QueryType\n\nhandler = Handler()\n\nquery = QueryDataItem(query='username', type=QueryType.USERNAME)\nhandler.branch_all(query)\nresults = handler.collector.get_data() #(1)!\n\nprint(results)\n</code></pre> <ol> <li>Handler's member collector is a sylva.Collector object where method get_data() returns a pandas.DataFrame</li> </ol>"},{"location":"reference/sylva.Collector/","title":"sylva.Collector","text":""},{"location":"reference/sylva.Collector/#sylva.Collector","title":"sylva.Collector","text":"<pre><code>Collector()\n</code></pre> <p>Result collector object to store results</p> <p>This object should rarely be interacted with directly. Rather, developers     are more likely to interact with this object via sylva.handler.Handler objects.</p> <p>Methods:</p> Name Description <code>insert</code> <p>Insert a new ResultDataFrame into the collector</p> <code>get_data</code> <p>Returns a DataFrame of the collected results</p> <code>deduplicate</code> <p>Deduplicate the collected results</p> <code>get_unique_queries</code> <p>Returns a list of unique queries</p> <code>get_unique_usernames</code> <p>Returns a list of unique usernames</p> <code>get_unique_emails</code> <p>Returns a list of unique emails</p> <code>get_unique_phones</code> <p>Returns a list of unique phone numbers</p> <code>get_unique_fullnames</code> <p>Returns a list of unique full names</p> <code>get_unique_fullname_groups</code> <p>Returns a list of unique firstname, middlename, and lastname groups</p>"},{"location":"reference/sylva.console/","title":"sylva.console","text":""},{"location":"reference/sylva.console/#sylva.console.interactive","title":"sylva.console.interactive","text":"<pre><code>interactive()\n</code></pre>"},{"location":"reference/sylva.console/#sylva.console.config_subcommand","title":"sylva.console.config_subcommand","text":"<pre><code>config_subcommand(args)\n</code></pre> <p>Handles the config subcommand</p> <p>Keyword Arguments: args -- argparse.Namespace</p>"},{"location":"reference/sylva.console/#sylva.console.search_subcommand","title":"sylva.console.search_subcommand","text":"<pre><code>search_subcommand(args)\n</code></pre> <p>Handles the search subcommand</p> <p>Keyword Arguments: args -- argparse.Namespace</p>"},{"location":"reference/sylva.console/#sylva.console.branch_subcommand","title":"sylva.console.branch_subcommand","text":"<pre><code>branch_subcommand(args)\n</code></pre>"},{"location":"reference/sylva.console/#sylva.console.interactive_setup_subcommand","title":"sylva.console.interactive_setup_subcommand","text":"<pre><code>interactive_setup_subcommand(args)\n</code></pre>"},{"location":"reference/sylva.errors/","title":"sylva.errors","text":""},{"location":"reference/sylva.errors/#sylva.errors","title":"sylva.errors","text":""},{"location":"reference/sylva.errors/#sylva.errors.APIKeyError","title":"APIKeyError","text":"<pre><code>APIKeyError(message='', key_not_provided=False)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>Raised for issues relating to the use of third-party API keys</p>"},{"location":"reference/sylva.errors/#sylva.errors.APIKeyError.key_not_provided","title":"key_not_provided  <code>instance-attribute</code>","text":"<pre><code>key_not_provided = key_not_provided\n</code></pre>"},{"location":"reference/sylva.errors/#sylva.errors.IncompatibleQueryType","title":"IncompatibleQueryType","text":"<p>               Bases: <code>Exception</code></p>"},{"location":"reference/sylva.errors/#sylva.errors.RequestError","title":"RequestError","text":"<pre><code>RequestError(message='', rate_limit_exceeded=False)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>Raised when a request fails within a module</p>"},{"location":"reference/sylva.errors/#sylva.errors.RequestError.rate_limit_exceeded","title":"rate_limit_exceeded  <code>instance-attribute</code>","text":"<pre><code>rate_limit_exceeded = rate_limit_exceeded\n</code></pre>"},{"location":"reference/sylva.handler/","title":"sylva.handler","text":""},{"location":"reference/sylva.handler/#sylva.handler.Handler","title":"sylva.handler.Handler","text":"<pre><code>Handler()\n</code></pre> <p>Request handler with built-in helpers and proxy services</p> <p>Attributes:</p> Name Type Description <code>collector</code> <code>Collector</code> <p>Collector object to store results</p> <code>runners</code> <code>List[Runner]</code> <p>List of search modules to execute queries</p> Executing a simple string-based search <pre><code>from sylva.handler import Handler\n\nhandler = Handler()\nhandler.branch_all('username')\nresults = handler.collector.get_data() # Returns a DataFrame\n\nprint(results)\n</code></pre> Executing a search using a QueryDataItem <pre><code>from sylva.handler import Handler, QueryDataItem\nfrom sylva.helpers.generic import QueryType\n\nhandler = Handler()\n\nquery = QueryDataItem(query='username', type=QueryType.USERNAME)\nhandler.branch_all(query)\nresults = handler.collector.get_data() # Returns a DataFrame\n\nprint(results)\n</code></pre>"},{"location":"reference/sylva.handler/#sylva.handler.Handler.__prepare_flaresolverr","title":"__prepare_flaresolverr","text":"<pre><code>__prepare_flaresolverr()\n</code></pre> <p>Attempt to start the proxy service and a common browser session</p>"},{"location":"reference/sylva.handler/#sylva.handler.Handler.branch_all","title":"branch_all","text":"<pre><code>branch_all(query, depth=1, no_deduplicate=False)\n</code></pre> <p>Recursively search all available modules for the given query</p> <p>Runs a variable-depth search for a given query across all available modules and     integrations, automatically deduplicating the results. Results are added to     the object's collector.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The query to search for</p> required <code>depth</code> <code>int</code> <p>The depth to search. Defaults to 1.</p> <code>1</code> <code>no_deduplicate</code> <code>bool</code> <p>Skip deduplication for manual processing. Defaults to False.</p> <code>False</code>"},{"location":"reference/sylva.handler/#sylva.handler.Handler.search_all","title":"search_all","text":"<pre><code>search_all(query, no_deduplicate=False)\n</code></pre> <p>Search all available modules for the given query</p> <p>Runs a single-depth search for a given query across all available modules and     integrations, automatically deduplicating the results. Results are added to     the object's collector.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str | QueryDataItem</code> <p>The query to search for</p> required <code>no_deduplicate</code> <code>bool</code> <p>Skip deduplication for manual processing. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of identities discovered</p>"},{"location":"reference/sylva.types/","title":"sylva.types","text":""},{"location":"reference/sylva.types/#sylva.types.QueryType","title":"sylva.types.QueryType","text":"<p>               Bases: <code>Enum</code></p> <p>Used to more consistently define the type of a query</p>"},{"location":"reference/sylva.types/#sylva.types.QueryType.EMAIL","title":"EMAIL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>EMAIL = 'Email'\n</code></pre>"},{"location":"reference/sylva.types/#sylva.types.QueryType.FIRSTNAME","title":"FIRSTNAME  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FIRSTNAME = 'First Name'\n</code></pre>"},{"location":"reference/sylva.types/#sylva.types.QueryType.FIRSTNAME_LASTNAME","title":"FIRSTNAME_LASTNAME  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FIRSTNAME_LASTNAME = 'Divided Name'\n</code></pre>"},{"location":"reference/sylva.types/#sylva.types.QueryType.FULLNAME","title":"FULLNAME  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FULLNAME = 'Full Name'\n</code></pre>"},{"location":"reference/sylva.types/#sylva.types.QueryType.LASTNAME","title":"LASTNAME  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LASTNAME = 'Last Name'\n</code></pre>"},{"location":"reference/sylva.types/#sylva.types.QueryType.PHONE","title":"PHONE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PHONE = 'Phone'\n</code></pre>"},{"location":"reference/sylva.types/#sylva.types.QueryType.TEXT","title":"TEXT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TEXT = 'Simple'\n</code></pre>"},{"location":"reference/sylva.types/#sylva.types.QueryType.USERNAME","title":"USERNAME  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>USERNAME = 'Username'\n</code></pre>"},{"location":"reference/sylva.types/#sylva.types.ResultDataFrame","title":"sylva.types.ResultDataFrame","text":"<pre><code>ResultDataFrame()\n</code></pre> <p>Structured DataFrame for result handling</p> <p>This object should rarely be interacted with directly, but the structure is     valuable knowledge to have as returned DataFrames will be of this type.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>DataFrame</code> <p>The internal DataFrame object</p> <p>Methods:</p> Name Description <code>insert_frame</code> <p>Insert a new DataFrame into the collector</p> <code>get_data</code> <p>Returns a Pandas DataFrame of the collected results</p> <code>deduplicate</code> <p>Deduplicate the collected results</p>"},{"location":"reference/sylva.types/#sylva.types.ResultDataFrame.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data = DataFrame(columns=['query', 'source_name', 'branch_recommended', 'platform_name', 'platform_url', 'username', 'email', 'phone', 'password', 'age', 'sex', 'first_name', 'middle_name', 'last_name', 'full_name', 'birth_year', 'birth_month', 'birth_day', 'street', 'unit', 'city', 'region', 'postal_code', 'country', 'raw_address', 'comment'])\n</code></pre>"},{"location":"reference/sylva.types/#sylva.types.ResultDataFrame.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre>"},{"location":"reference/sylva.types/#sylva.types.ResultDataFrame.deduplicate","title":"deduplicate","text":"<pre><code>deduplicate()\n</code></pre>"},{"location":"reference/sylva.types/#sylva.types.ResultDataFrame.get_data","title":"get_data","text":"<pre><code>get_data()\n</code></pre>"},{"location":"reference/sylva.types/#sylva.types.ResultDataFrame.insert_frame","title":"insert_frame","text":"<pre><code>insert_frame(new_data)\n</code></pre>"}]}